generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  owner
  member
  viewer
}

model User {
  id            String        @id @default(cuid())
  email         String?       @unique
  name          String?
  image         String?
  // next-auth
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  memberships   Membership[]
  alertPreferences AlertPreference[]
  auditLogs     AuditLog[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  industry    String?
  timezone    String       @default("UTC")
  
  // Onboarding flags
  hasConnectedGoogle    Boolean @default(false)
  hasSelectedLocation   Boolean @default(false)
  hasSetAlerts          Boolean @default(false)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  memberships Membership[]
  locations   Location[]
  alertPreferences AlertPreference[]
  integrationsGoogle IntegrationGoogle[]
  subscriptions Subscription[]
  webhookEvents WebhookEvent[]
  auditLogs   AuditLog[]
}

model Membership {
  id             String @id @default(cuid())
  userId         String
  organizationId String
  role           Role   @default(member)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Location {
  id             String @id @default(cuid())
  organizationId String
  name           String
  externalId     String? // Google Business Profile location ID
  address        String?
  city           String?
  state          String?
  country        String?
  postalCode     String?
  phone          String?
  website        String?
  googlePlaceId  String?
  yelpBusinessId String?
  facebookPageId String?
  tripadvisorId  String?
  isActive       Boolean @default(true)
  deleted        Boolean @default(false) // soft delete
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  reviews      Review[]
  alertPreferences AlertPreference[]
}

model IntegrationGoogle {
  id             String @id @default(cuid())
  organizationId String @unique
  accessTokenEnc String? // encrypted access token
  refreshTokenEnc String? // encrypted refresh token
  scope          String?
  tokenType      String?
  expiryDate     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Review {
  id           String @id @default(cuid())
  locationId   String
  externalId   String?
  platform     String // 'google', 'yelp', 'facebook', 'tripadvisor'
  platformId   String // external review ID
  authorName   String?
  authorEmail  String?
  rating       Int
  title        String?
  content      String
  text         String?
  reviewUrl    String?
  publishedAt  DateTime
  postedAt     DateTime?
  isResponded  Boolean @default(false)
  status       String  @default("new") // new | drafted | replied
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  location   Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  replies    ReviewReply[]

  @@index([locationId])
  @@index([externalId])
  @@index([status])
}

model ReviewReply {
  id        String   @id @default(cuid())
  reviewId  String
  content   String
  isAIGenerated Boolean @default(false)
  publishedAt DateTime?
  // Step 5 additions
  authorId  String?
  draft     String?
  posted    String?
  postedAt  DateTime?
  state     String   @default("draft")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model AlertPreference {
  id               String   @id @default(cuid())
  userId           String
  organizationId   String
  locationId       String
  // Step 7: per-user, per-location preferences
  channelEmail     Boolean  @default(true)
  channelWhatsApp  Boolean  @default(false)
  whatsappNumber   String?  // E.164 phone format
  starThreshold    Int?     // notify if rating <= threshold; null means notify all
  frequency        String   @default("instant") // instant | daily
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  location     Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId])
  @@index([organizationId])
}

model Subscription {
  id             String @id @default(cuid())
  organizationId String @unique

  // Lemon Squeezy identifiers
  lsStoreId        String?
  lsVariantId      String?
  lsCustomerId     String?
  lsSubscriptionId String?

  // Status + periods
  status           String?    // trialing | active | paused | canceled | expired | past_due
  currentPeriodEnd DateTime?
  trialEndsAt      DateTime?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model WebhookEvent {
  id             String @id @default(cuid())
  organizationId String
  platform       String // 'google', 'yelp', etc.
  eventType      String // 'review.created', 'review.updated', etc.
  payload        Json
  processed      Boolean @default(false)
  processedAt    DateTime?
  errorMessage   String?
  retryCount     Int @default(0)
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id             String   @id @default(cuid())
  organizationId String
  userId         String?
  action         String   // e.g., "review.replied", "settings.updated", "user.invited"
  targetId       String?  // ID of the affected resource
  metadata       Json?    // Additional context data
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}